import os
import time
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import torch
import torch.optim as optim
import torch.nn as nn
from torch.autograd import Variable
from dip import EncDec
from utils import imread
from utils import gaussian
from scipy import ndimage
from scipy import signal

torch.manual_seed(123)
 
# Load clean and noisy image
#im = imread('../data/denoising/saturn.png')
#noise1 = imread('../data/denoising/saturn-noisy.png')
im = imread('../data/denoising/lena.png')
noise1 = imread('../data/denoising/lena-noisy.png')

error1 = ((im - noise1)**2).sum()
print('Noisy image SE: {:.2f}'.format(error1))

plt.figure(1)

# Original image
plt.subplot(141)
plt.imshow(im, cmap='gray')
plt.title('Input')

# Noisy version
plt.subplot(142)
plt.imshow(noise1, cmap='gray')
plt.title('Noisy image SE {:.2f}'.format(error1))

# Apply Gaussian filter
plt.subplot(143)
gaussian_filter = gaussian(7, 2)
im_gauss = ndimage.convolve(noise1, gaussian_filter, mode="nearest")
error_gauss = ((im - im_gauss)**2).sum()
plt.imshow(im_gauss, cmap='gray')
plt.title('Gaussian SE {:.2f}'.format(error_gauss))

# Apply Median filter
plt.subplot(144)
im_med = signal.medfilt(noise1, 7)
error_med = ((im - im_med)**2).sum()
plt.imshow(im_med, cmap='gray')
plt.title('Median SE {:.2f}'.format(error_med))
plt.show(block=True)

################################################################################
# Denoising algorithm (Deep Image Prior)
################################################################################

#Create network
net = EncDec()

# Loads noisy image and sets it to the appropriate shape
noisy_img = torch.FloatTensor(noise1).unsqueeze(0).unsqueeze(0).transpose(2, 3)
clean_img = torch.FloatTensor(im).unsqueeze(0).unsqueeze(0).transpose(2,3)

#Show five images generated by the network in your report by sampling different random inputs and network parameters
for i in range(5):
    eta = torch.randn(*noisy_img.size())
    eta.detach()
    out = net(eta)
    out_img = out[0, 0, :, :].transpose(0,1).detach().numpy()
    plt.imshow(out_img, cmap='gray')
    plt.title('Output Image: {}'.format(i+1))
    plt.show()    

#Creates eta (noisy input)    
eta = torch.randn(*noisy_img.size())
eta.detach()

###
# Your training code goes here.
###

iteration = 500
lr = 0.01 #0.01 for Saturn and 0.005 for Lena
criterion = nn.MSELoss(reduction = 'sum')
optimizer = torch.optim.Adam(net.parameters(), lr = lr)
eTrain = np.zeros((iteration, 1))
eTest = np.zeros((iteration, 1))

def monitorTestLoss(net, imgInput, imgDestination):
    net.eval()
    lossTest = 0   
    with torch.no_grad():
        output = net(imgInput)
        lossTest = criterion(output, imgDestination)        
    return lossTest    

for epoch in range(iteration):
    net.train()
    eta = Variable(eta)
    output = net(eta)
    loss = criterion(output, noisy_img)  
    eTrain[epoch] = loss.data
    optimizer.zero_grad() 
    loss.backward()
    optimizer.step()
    eTest[epoch] = monitorTestLoss(net, eta, clean_img)
    print('Epoch {}.....................Train Loss:{:.4f}'.format(epoch + 1, loss.data.item()))
    earlyStop = 405 #405 for saturn and 480 for lena
    #if epoch == earlyStop: #Uncomment to perform Early Stopping
    #   break               #Uncomment to perform Early Stopping

print('Early Stopping Indices:', np.where(eTest == np.amin(eTest)))
print('Early Stopping Error Value:', np.amin(eTest))

out = net(eta)
out_img = out[0, 0, :, :].transpose(0,1).detach().numpy()

plt.figure(5)
plt.axis('off')

plt.subplot(151)
plt.imshow(im, cmap='gray')
plt.title('Input Image')

plt.subplot(152)
plt.imshow(noise1, cmap='gray')
error1 = ((im - noise1)**2).sum()
plt.title('Noisy Image Squared Error {:.2f}'.format(error1))

plt.subplot(153)
plt.imshow(out_img, cmap='gray')
error2 = ((im - out_img)**2).sum()
plt.title('Output Image Squared Error {:.2f}'.format(error2))

plt.subplot(154)
gaussian_filter = gaussian(7, 2)
im_gauss = ndimage.convolve(noise1, gaussian_filter, mode="nearest")
error_gauss = ((im - im_gauss)**2).sum()
plt.imshow(im_gauss, cmap='gray')
plt.title('Gaussian Squared Error {:.2f}'.format(error_gauss))

plt.subplot(155)
im_med = signal.medfilt(noise1, 7)
error_med = ((im - im_med)**2).sum()
plt.imshow(im_med, cmap='gray')
plt.title('Median Squared Error {:.2f}'.format(error_med))
plt.show()

fig = plt.gcf()
sns.set_style("darkgrid", {"grid.color": ".6", "grid.linestyle": ":"})
plt.xscale("log")
plt.plot(np.arange(1, iteration + 1), eTrain, marker='o', linestyle='dashed', label='Training Error')
plt.plot(np.arange(1, iteration + 1), eTest, marker='o', linestyle='dashed', label='Testing Error')
plt.legend(prop={'size': 22})
plt.xlabel('Iterations', fontsize=22)
plt.ylabel('Loss Function: Squared Error', fontsize=22)
plt.title(r'Training & Testing Error', fontsize=22)
plt.show()